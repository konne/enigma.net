trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: echo hello from Linux
- job: macOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: echo hello from macOS

# Provide a name for the job
#- job: Linux

  # The VM image to use for the hosted agent. For a list of possible agents
  # see https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
  # You can see the software installed on each agent at the same link.
#  pool:
#    vmImage: 'ubuntu-16.04'

  # The steps to run to execute the build. I'm using
  # Cake, and so I execute a bash script on Linx and macOS
#  steps:
#  - bash: ./build.sh
    # You can set environment variables for the build. These
    # aren't really necessary, but they're here as an example
#    env:
#      COREHOST_TRACE: 0
#      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
#      DOTNET_CLI_TELEMETRY_OPTOUT: 1

# Run a build on macOS at the same time
#- job: macOS
#  pool:
#    vmImage: 'xcode9-macos10.13'
#  steps:
#  - bash: ./build.sh
#    env:
#      COREHOST_TRACE: 0
#      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
#      DOTNET_CLI_TELEMETRY_OPTOUT: 1

# Run a build on Windows at the same time
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'

  steps:
    - task: NuGetToolInstaller@0

    - task: NuGetCommand@2
      inputs:
        restoreSolution: 'tests/test.sln'

    - task: VSBuild@1
      inputs:
        solution: 'tests/test.sln'
        #platform: ''
        configuration: 'Debug'

    #solution: '**\*.sln' 
    #vsVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 11.0
    #msbuildArgs: # Optional
    #platform: # Optional
    #configuration: # Optional
    #clean: false # Optional
    #maximumCpuCount: false # Optional
    #restoreNugetPackages: false # Optional
    #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
    #logProjectEvents: true # Optional
    #createLogFile: false # Optional
    #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic

#    - task: VSTest@2
#      inputs:
#        platform: '$(buildPlatform)'
#        configuration: '$(buildConfiguration)'
